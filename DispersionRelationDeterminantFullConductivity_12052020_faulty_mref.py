# -*- coding: utf-8 -*-
"""
Created on Thu Nov 19 00:58:16 2020

@author: jlara
"""

import numpy as np

#The following function computes the growth rate of the slab MTM. The input are the physical parameters and it outputs the growth rate in units of omega_[*n]
#Parameters for function:
#nu: normalized to omega_[*n] 
#shat=L_n/L_s
#beta=plasma beta
#eta=L_n/L_T
#ky normalized to rho_i (ion gyroradius)

# function for dicretizing the MTM differential equations
# input domain of the grid (x_max), grid spacing (del_x), order of the desired conductivity desired
# this function calls the function above (??) 
# constructs matrix A using x_grid and del_x. A is defined on (-x_max, x_max)
# this is a matrix representation of the original coupled differential equations



def A_maker(x_max, del_x, w1, v1,eta,alpha,beta,ky,ModIndex,mu,xstar):
    
    mref=2.
    # making grid
    x_min = -x_max
    x_grid = np.arange(x_min, x_max+del_x, del_x)
    num = len(x_grid)
    # initializing matrix A
    A = np.zeros((2*num-4, 2*num-4), dtype=complex)
    
    # Calling the conductivity function which defines the conductvity order that will be used. 
    # The code also converts conversion of the data types
    
    #L_maker(leg, lag) ######### calling a function
    w_hat = w1/v1
    
    ### (a bunch of code that would've gone here was commented out in the Mathematica notebook by Joel
    ### so I'm skipping it for now)
    SMinusArray=np.array([[[0., 0., 0., 0., 0., 0., 0., 0.], [0., 0., 0., 0., 0., 0., 0., 0.], [0., 0., 0., 0., 0., 0., 0., 0.], [0., 0., 0., 0., 0., 0., 0.,0.], [0., 0., 0., 0., 0., 0., 0., 0.], [0., 0., 0., 0., 0., 0., 0., 0.], [0., 0., 0., 0., 0., 0., 0., 0.], [0., 0., 0., 0., 0., 0., 0., 0.]], [[0.707107, -0.57735, 0., 0., 0., 0., 0., 0.], [0., 0.912871, -0.816497, 0., 0., 0., 0., 0.], [0., 0., 1.08012, -1., 0., 0., 0., 0.], [0., 0., 0., 1.22474, -1.1547, 0., 0., 0.], [0., 0., 0., 0., 1.35401, -1.29099, 0., 0.], [0., 0., 0., 0., 0., 1.47196, -1.41421, 0.], [0., 0., 0., 0., 0., 0., 1.58114, -1.52753], [0., 0., 0., 0., 0., 0., 0., 1.68325]], [[0.816497, -0.516398, 0., 0., 0., 0., 0., 0.], [0., 0.966092, -0.730297, 0., 0., 0., 0., 0.], [0., 0., 1.09545, -0.894427, 0., 0., 0., 0.], [0., 0., 0., 1.21106, -1.0328, 0., 0., 0.], [0., 0., 0., 0., 1.31656, -1.1547, 0., 0.], [0., 0., 0., 0., 0., 1.41421, -1.26491, 0.], [0., 0., 0., 0., 0., 0., 1.50555, -1.36626], [0., 0., 0., 0., 0., 0., 0., 1.59164]], [[0.948683, -0.507093, 0., 0., 0., 0., 0., 0.], [0., 1.07571, -0.717137, 0., 0., 0., 0., 0.], [0., 0., 1.18924, -0.87831, 0., 0., 0., 0.], [0., 0., 0., 1.29284, -1.01419, 0., 0., 0.], [0., 0., 0., 0., 1.38873, -1.13389, 0., 0.], [0., 0., 0., 0., 0., 1.47842, -1.24212, 0.], [0., 0., 0., 0., 0., 0., 1.56296, -1.34164], [0., 0., 0., 0., 0., 0., 0., 1.64317]], [[1.06904, -0.503953, 0., 0., 0., 0., 0., 0.], [0., 1.18187, -0.712697, 0., 0., 0., 0., 0.], [0., 0., 1.28483, -0.872872, 0., 0., 0., 0.], [0., 0., 0., 1.38013, -1.00791, 0., 0., 0.], [0., 0., 0., 0., 1.46926, -1.12687, 0., 0.], [0., 0., 0., 0., 0., 1.55329, -1.23443, 0.], [0., 0., 0., 0., 0., 0., 1.63299, -1.33333], [0., 0., 0., 0., 0., 0., 0., 1.70899]], [[1.17851, -0.502519, 0., 0., 0., 0., 0., 0.], [0., 1.28118, -0.710669, 0., 0., 0., 0., 0.], [0., 0., 1.3762, -0.870388, 0., 0., 0., 0.], [0., 0., 0., 1.46508, -1.00504, 0., 0., 0.], [0., 0., 0., 0., 1.54887, -1.12367, 0., 0.], [0., 0., 0., 0., 0., 1.62835, -1.23091, 0.], [0., 0., 0., 0., 0., 0., 1.70412, -1.32954], [0., 0., 0., 0., 0., 0., 0., 1.77667]]])
    SMinusArray=SMinusArray.astype(complex)
    SPlusArray=np.array([[[0.707107, 0., 0., 0., 0., 0., 0., 0.], [-0.57735, 0.912871, 0., 0., 0., 0., 0., 0.], [0., -0.816497, 1.08012, 0., 0., 0., 0., 0.], [0., 0., -1., 1.22474, 0., 0., 0., 0.], [0., 0., 0., -1.1547, 1.35401, 0., 0., 0.], [0., 0., 0., 0., -1.29099, 1.47196, 0., 0.], [0., 0., 0., 0., 0., -1.41421, 1.58114, 0.], [0., 0., 0., 0., 0., 0., -1.52753, 1.68325]], [[0.816497, 0., 0., 0., 0., 0., 0., 0.], [-0.516398, 0.966092, 0., 0., 0., 0., 0., 0.], [0., -0.730297, 1.09545, 0., 0., 0., 0., 0.], [0., 0., -0.894427, 1.21106, 0., 0., 0., 0.], [0., 0., 0., -1.0328, 1.31656, 0., 0., 0.], [0., 0., 0., 0., -1.1547, 1.41421, 0., 0.], [0., 0., 0., 0., 0., -1.26491, 1.50555, 0.], [0., 0., 0., 0., 0., 0., -1.36626, 1.59164]], [[0.948683, 0., 0., 0., 0., 0., 0., 0.], [-0.507093, 1.07571, 0., 0., 0., 0., 0., 0.], [0., -0.717137, 1.18924, 0., 0., 0., 0., 0.], [0., 0., -0.87831, 1.29284, 0., 0., 0., 0.], [0., 0., 0., -1.01419, 1.38873, 0., 0., 0.], [0., 0., 0., 0., -1.13389, 1.47842, 0., 0.], [0., 0., 0., 0., 0., -1.24212, 1.56296, 0.], [0., 0., 0., 0., 0., 0., -1.34164, 1.64317]], [[1.06904, 0., 0., 0., 0., 0., 0., 0.], [-0.503953, 1.18187, 0., 0., 0., 0., 0., 0.], [0., -0.712697, 1.28483, 0., 0., 0., 0., 0.], [0., 0., -0.872872, 1.38013, 0., 0., 0., 0.], [0., 0., 0., -1.00791, 1.46926, 0., 0., 0.], [0., 0., 0., 0., -1.12687, 1.55329, 0., 0.], [0., 0., 0., 0., 0., -1.23443, 1.63299, 0.], [0., 0., 0., 0., 0., 0., -1.33333, 1.70899]], [[1.17851, 0., 0., 0., 0., 0., 0., 0.], [-0.502519, 1.28118, 0., 0., 0., 0., 0., 0.], [0., -0.710669, 1.3762, 0., 0., 0., 0., 0.], [0., 0., -0.870388, 1.46508, 0., 0., 0., 0.], [0., 0., 0., -1.00504, 1.54887, 0., 0., 0.], [0., 0., 0., 0., -1.12367, 1.62835, 0., 0.], [0., 0., 0., 0., 0., -1.23091, 1.70412, 0.], [0., 0., 0., 0., 0., 0., -1.32954, 1.77667]]])
    SPlusArray=SPlusArray.astype(complex)
    VArray=np.array([[[-0.752253, -0.71365, -0.674336, -0.642358, -0.61628, -0.594565, \
-0.576111, -0.560156], [-0.71365, -1.40347, -1.22218, -1.08074, \
-0.992364, -0.93612, -0.897748, -0.869373], [-0.674336, -1.22218, \
-1.84721, -1.66056, -1.46245, -1.31971, -1.22419, -1.16037], \
[-0.642358, -1.08074, -1.66056, -2.21962, -2.03559, -1.80662, \
-1.62394, -1.49317], [-0.61628, -0.992364, -1.46245, -2.03559, \
-2.54542, -2.36554, -2.11866, -1.907], [-0.594565, -0.93612, \
-1.31971, -1.80662, -2.36554, -2.83783, -2.66232, -2.40462], \
[-0.576111, -0.897748, -1.22419, -1.62394, -2.11866, -2.66232, \
-3.10496, -2.93366], [-0.560156, -0.869373, -1.16037, -1.49317, \
-1.907, -2.40462, -2.93366, -3.35218]], [[-1.54101, -0.979665, \
-0.709766, -0.565628, -0.47891, -0.421029, -0.379071, -0.34673], \
[-0.979665, -1.87503, -1.4639, -1.14456, -0.936081, -0.799501, \
-0.70615, -0.638799], [-0.709766, -1.4639, -2.20379, -1.86397, \
-1.52646, -1.27529, -1.09786, -0.972146], [-0.565628, -1.14456, \
-1.86397, -2.50873, -2.21109, -1.86757, -1.58805, -1.37842], \
[-0.47891, -0.936081, -1.52646, -2.21109, -2.79014, -2.52079, \
-2.17666, -1.87794], [-0.421029, -0.799501, -1.27529, -1.86757, \
-2.52079, -3.05116, -2.80237, -2.4602], [-0.379071, -0.70615, \
-1.09786, -1.58805, -2.17666, -2.80237, -3.29493, -3.06191], \
[-0.34673, -0.638799, -0.972146, -1.37842, -1.87794, -2.4602, \
-3.06191, -3.52407]], [[-1.98912, -1.16473, -0.750363, -0.529727, \
-0.402577, -0.323368, -0.27032, -0.232475], [-1.16473, -2.25162, \
-1.64859, -1.19363, -0.898424, -0.707261, -0.579768, -0.491176], \
[-0.750363, -1.64859, -2.52093, -2.03276, -1.57436, -1.23727, \
-1.00006, -0.832966], [-0.529727, -1.19363, -2.03276, -2.78138, \
-2.36427, -1.91294, -1.55095, -1.27991], [-0.402577, -0.898424, \
-1.57436, -2.36427, -3.02927, -2.66072, -2.21975, -1.84264], \
[-0.323368, -0.707261, -1.23727, -1.91294, -2.66072, -3.26446, \
-2.93134, -2.50148], [-0.27032, -0.579768, -1.00006, -1.55095, \
-2.21975, -2.93134, -3.48782, -3.18179], [-0.232475, -0.491176, \
-0.832966, -1.27991, -1.84264, -2.50148, -3.18179, -3.70047]], \
[[-2.30639, -1.27914, -0.771783, -0.504612, -0.35385, -0.263206, \
-0.205343, -0.166271], [-1.27914, -2.5513, -1.77966, -1.22098, \
-0.865687, -0.639701, -0.492387, -0.393094], [-0.771783, -1.77966, \
-2.7927, -2.16365, -1.60287, -1.20017, -0.921429, -0.728256], \
[-0.504612, -1.22098, -2.16365, -3.02675, -2.49012, -1.94127, \
-1.51175, -1.19505], [-0.35385, -0.865687, -1.60287, -2.49012, \
-3.2519, -2.78036, -2.24762, -1.80292], [-0.263206, -0.639701, \
-1.20017, -1.94127, -2.78036, -3.46791, -3.04478, -2.52893], \
[-0.205343, -0.492387, -0.921429, -1.51175, -2.24762, -3.04478, \
-3.67511, -3.28946], [-0.166271, -0.393094, -0.728256, -1.19505, \
-1.80292, -2.52893, -3.28946, -3.87407]], [[-2.55498, -1.34775, \
-0.774978, -0.480505, -0.317789, -0.2224, -0.163458, -0.125198], \
[-1.34775, -2.79575, -1.86896, -1.22832, -0.831993, -0.585316, \
-0.427982, -0.324588], [-0.774978, -1.86896, -3.02436, -2.26068, \
-1.61281, -1.16071, -0.854406, -0.6462], [-0.480505, -1.22832, \
-2.26068, -3.24353, -2.58906, -1.95292, -1.46903, -1.11951], \
[-0.317789, -0.831993, -1.61281, -2.58906, -3.45414, -2.87847, \
-2.26049, -1.75865], [-0.2224, -0.585316, -1.16071, -1.95292, \
-2.87847, -3.65678, -3.14081, -2.54277], [-0.163458, -0.427982, \
-0.854406, -1.46903, -2.26049, -3.14081, -3.85198, -3.38286], \
[-0.125198, -0.324588, -0.6462, -1.11951, -1.75865, -2.54277, \
-3.38286, -4.04026]]])
    VArray=VArray.astype(complex)
    
    L11_grid=np.arange(x_min, x_max+del_x, del_x,dtype=complex)
    L12grid=np.arange(x_min, x_max+del_x, del_x,dtype=complex)
    for i in range(num):
        k= (2.*x_grid[i]*alpha*np.sqrt(mref*1836.))/v1
        h1 = np.linalg.inv(1j*w_hat*np.identity(8)+VArray[0]-1j*(k**2/w_hat)*np.matmul(SMinusArray[1],SPlusArray[0])+k**2*np.matmul(np.matmul(SPlusArray[1],np.linalg.inv(
                1j*w_hat*np.identity(8)+VArray[1]+ 
                k**2*np.matmul(np.matmul(SPlusArray[2],np.linalg.inv(
                        1j*w_hat*np.identity(8)+VArray[2]+
                        k**2*np.matmul(np.matmul(SPlusArray[3],np.linalg.inv(
                                1j*w_hat*np.identity(8)+VArray[3]+
                                k**2*np.matmul(np.matmul(SPlusArray[4],np.linalg.inv(
                                        1j*w_hat*np.identity(8)+VArray[4])),SMinusArray[5]))),SMinusArray[
                                        4]))),SMinusArray[3]))),SMinusArray[2]))
        L11_grid[i]=np.matmul(h1,np.array([0.5+0.j,0.+0.j,0.+0.j,0.+0.j,0.+0.j,0,0,0],dtype=complex))[0]
        L12grid[i]=np.matmul(h1,np.array([0.+0.j,-0.790569+0.j,0,0,0,0,0,0],dtype=complex))[0]
    
    if ModIndex==0:
        ModG=1.
    
    elif ModIndex==1:
        ModG=np.exp(-((x_grid-mu)/xstar)**2)
    else:
        print("ModIndex must be 0 or 1")
        ModG=0
    sigma_grid = (w1*L11_grid-(1.0+eta)*np.multiply(L11_grid,ModG) - eta*np.multiply(L12grid,ModG))/v1
    #print(sigma_grid)
    #print(ModG)
    # computing the diagonal components of the matrix
    a11 = ky**2 + 2j*mref*1836*beta*sigma_grid
    a12 = -4j*mref*1836**1.5*alpha*beta*sigma_grid*x_grid
    a21 = 4j*alpha*np.sqrt(mref*1836)*sigma_grid/(w1*(w1+1))*x_grid
    a22 = ky**2 - 8j*alpha**2*mref*1836*sigma_grid/(w1*(w1+1))*x_grid**2
    # populating the matrix with the components of the matrix
    # this loop populates the off-diagonal components coming from the finite difference
    for i in range(num-3):
        A[i, i+1], A[i+1, i], A[num-2+i, num-2+i+1],  A[num-2+i+1, num-2+i] \
        = -1/del_x**2, -1/del_x**2, -1/del_x**2, -1/del_x**2

      # this loop populates the diagonal components of the matrix
      ##### testing
    for i in range(num-2):
        A[i,i] = 2/del_x**2 + a11[i+1]
        A[num-2+i, num-2+i] = 2/del_x**2 + a22[i+1]
        A[num-2+i, i] = a21[i+1]
        A[i, num-2+i] = a12[i+1]

    A[0,0] = A[0,0] - 1/del_x**2*(1-ky*del_x)
    A[num-3,num-3] = A[num-3,num-3] - 1/del_x**2*(1-ky*del_x)
    A[num-2,num-2] = A[num-2,num-2] - 1/del_x**2*(1-ky*del_x)
    A[2*num-5,2*num-5] =  A[2*num-5,2*num-5] - 1/del_x**2*(1-ky*del_x)
    return A

def w_finder(x_max, del_x, w_guess, v,ne,alpha,beta,ky,ModIndex,mu,xstar):

    w_minus=w_guess
    # call A_maker to create and populate matrix A
    A = A_maker(x_max, del_x, w_guess, v,ne,alpha,beta,ky,ModIndex,mu,xstar) ##### maybe relabel this as A-minus

    # first step is chosen to be del_w = 0.01 (??? should this be a parameter?)
    del_w = 0.01
    det_A_minus = np.linalg.slogdet(A)
    w0 = w_minus + del_w

    # iterative loop that runs until the correction to the root is very small
    # secant method??
    while np.abs(del_w) > 10**-8:
        A = A_maker(x_max, del_x, w0, v,ne,alpha,beta,ky,ModIndex,mu,xstar)
        det_A0 = np.linalg.slogdet(A)
        del_w = -del_w/(1-(det_A_minus[0]/det_A0[0])*np.exp(det_A_minus[1]-det_A0[1]))
        w_plus = w0 + del_w
        w_minus = w0
        w0 = w_plus
        det_A_minus = det_A0
        #print(w0)
    return w0

def Dispersion(nu,eta,shat,beta,ky,ModIndex,mu,xstar):
  mref=2.
  #Fit Parameters
  xsigma=1./shat*np.sqrt(1./(mref*1836))
  xmax=xsigma*25.
  delx=xsigma/50.
  
  ky=ky*np.sqrt(2.)
  mu=abs(mu)


  w0=w_finder(xmax,delx,1+eta,nu,eta,shat,beta,ky,ModIndex,mu,xstar)
  print("****************")
  print("****************")
  print("****************")
  print("****************")
  print("nu,eta,shat,beta,ky,ModIndex,mu,xstar")
  print(nu,eta,shat,beta,ky,ModIndex,mu,xstar)
  print("omeag+j*gamma")
  print(w0)
  print("****************")
  print("****************")
  print("****************")
  print("****************")
  return w0
